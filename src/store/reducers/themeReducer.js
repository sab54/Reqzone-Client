// src/store/reducers/themeReducer.js
/**
 * themeReducer.js
 *
 * Manages application theming state.
 *
 * State:
 * - `mode`: theme preference ('light' | 'dark' | 'system')
 * - `isDarkMode`: effective dark mode flag (derived from system/user choice)
 * - `themeColors`: color palette generated by `getThemeColors`
 *
 * Reducers:
 * - `setThemeMode(mode)` → sets theme preference, does not alter effective colors
 * - `setEffectiveDarkMode(flag)` → sets `isDarkMode` and regenerates `themeColors`
 *
 * Notes:
 * - `getThemeColors` is the single source of truth for color tokens.
 * - Separation of `mode` vs. `isDarkMode` allows for system-driven themes.
 */

import { createSlice } from '@reduxjs/toolkit';
import { getThemeColors } from '../../theme/themeTokens';

const initialState = {
    mode: 'system', // 'light' | 'dark' | 'system'
    isDarkMode: false,
    themeColors: getThemeColors(false),
};

const themeSlice = createSlice({
    name: 'theme',
    initialState,
    reducers: {
        setThemeMode: (state, action) => {
            state.mode = action.payload;
        },
        setEffectiveDarkMode: (state, action) => {
            state.isDarkMode = action.payload;
            state.themeColors = getThemeColors(action.payload);
        },
    },
});

export const { setThemeMode, setEffectiveDarkMode } = themeSlice.actions;
export default themeSlice.reducer;
